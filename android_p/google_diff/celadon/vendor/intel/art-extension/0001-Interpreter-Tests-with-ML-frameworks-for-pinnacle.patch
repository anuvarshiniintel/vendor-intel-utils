From fb4bb4bf2db157be62ae16fd9d58267b3913d628 Mon Sep 17 00:00:00 2001
From: anuvarsh <anuvarshini.bc@intel.com>
Date: Wed, 6 Mar 2019 11:49:26 +0530
Subject: [PATCH] Interpreter Tests with ML frameworks for pinnacle

Tracked-On: NONE
Signed-off-by: anuvarsh <anuvarshini.bc@intel.com>
---
 ...ests-with-ML-frameworks-for-pinnacle.patch | 339 ++++++++++++++++++
 runtime/interpreter/mterp/out/mterp_x86_64.S  | 160 ++++-----
 runtime/interpreter/mterp/x86_64/sseBinop.S   |  10 +-
 .../interpreter/mterp/x86_64/sseBinop2Addr.S  |  10 +-
 4 files changed, 429 insertions(+), 90 deletions(-)
 create mode 100644 runtime/interpreter/mterp/0001-Interpreter-Tests-with-ML-frameworks-for-pinnacle.patch

diff --git a/runtime/interpreter/mterp/0001-Interpreter-Tests-with-ML-frameworks-for-pinnacle.patch b/runtime/interpreter/mterp/0001-Interpreter-Tests-with-ML-frameworks-for-pinnacle.patch
new file mode 100644
index 000000000..a2abc8409
--- /dev/null
+++ b/runtime/interpreter/mterp/0001-Interpreter-Tests-with-ML-frameworks-for-pinnacle.patch
@@ -0,0 +1,339 @@
+From 63eec8ddf1a216d85649ee8b85fe3ede6c503896 Mon Sep 17 00:00:00 2001
+From: anuvarsh <anuvarshini.bc@intel.com>
+Date: Wed, 6 Mar 2019 11:49:26 +0530
+Subject: [PATCH] Interpreter Tests with ML frameworks for pinnacle
+
+Tracked-On: NONE
+Signed-off-by: anuvarsh <anuvarshini.bc@intel.com>
+---
+ runtime/interpreter/mterp/out/mterp_x86_64.S  | 160 +++++++++---------
+ runtime/interpreter/mterp/x86_64/sseBinop.S   |  10 +-
+ .../interpreter/mterp/x86_64/sseBinop2Addr.S  |  10 +-
+ 3 files changed, 90 insertions(+), 90 deletions(-)
+
+diff --git a/runtime/interpreter/mterp/out/mterp_x86_64.S b/runtime/interpreter/mterp/out/mterp_x86_64.S
+index fca251569..b156240a4 100644
+--- a/runtime/interpreter/mterp/out/mterp_x86_64.S
++++ b/runtime/interpreter/mterp/out/mterp_x86_64.S
+@@ -4271,11 +4271,11 @@ movswl %ax, %eax
+ /* File: x86_64/sseBinop.S */
+     movzbq  2(rPC), %rcx                    # ecx <- BB
+     movzbq  3(rPC), %rax                    # eax <- CC
+-    movss   VREG_ADDRESS(%rcx), %xmm0       # %xmm0 <- 1st src
+-    addss VREG_ADDRESS(%rax), %xmm0
+-    movss   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
+-    pxor    %xmm0, %xmm0
+-    movss   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
++    vmovss   VREG_ADDRESS(%rcx), %xmm1       # %xmm1 <- 1st src
++    vaddss VREG_ADDRESS(%rax), %xmm1, %xmm0
++    vmovss   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
++    vpxor    %xmm0, %xmm0, %xmm0
++    vmovss   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
+     ADVANCE_PC_FETCH_AND_GOTO_NEXT 2
+ 
+ 
+@@ -4286,11 +4286,11 @@ movswl %ax, %eax
+ /* File: x86_64/sseBinop.S */
+     movzbq  2(rPC), %rcx                    # ecx <- BB
+     movzbq  3(rPC), %rax                    # eax <- CC
+-    movss   VREG_ADDRESS(%rcx), %xmm0       # %xmm0 <- 1st src
+-    subss VREG_ADDRESS(%rax), %xmm0
+-    movss   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
+-    pxor    %xmm0, %xmm0
+-    movss   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
++    vmovss   VREG_ADDRESS(%rcx), %xmm1       # %xmm1 <- 1st src
++    vsubss VREG_ADDRESS(%rax), %xmm1, %xmm0
++    vmovss   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
++    vpxor    %xmm0, %xmm0, %xmm0
++    vmovss   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
+     ADVANCE_PC_FETCH_AND_GOTO_NEXT 2
+ 
+ 
+@@ -4301,11 +4301,11 @@ movswl %ax, %eax
+ /* File: x86_64/sseBinop.S */
+     movzbq  2(rPC), %rcx                    # ecx <- BB
+     movzbq  3(rPC), %rax                    # eax <- CC
+-    movss   VREG_ADDRESS(%rcx), %xmm0       # %xmm0 <- 1st src
+-    mulss VREG_ADDRESS(%rax), %xmm0
+-    movss   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
+-    pxor    %xmm0, %xmm0
+-    movss   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
++    vmovss   VREG_ADDRESS(%rcx), %xmm1       # %xmm1 <- 1st src
++    vmulss VREG_ADDRESS(%rax), %xmm1, %xmm0
++    vmovss   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
++    vpxor    %xmm0, %xmm0, %xmm0
++    vmovss   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
+     ADVANCE_PC_FETCH_AND_GOTO_NEXT 2
+ 
+ 
+@@ -4316,11 +4316,11 @@ movswl %ax, %eax
+ /* File: x86_64/sseBinop.S */
+     movzbq  2(rPC), %rcx                    # ecx <- BB
+     movzbq  3(rPC), %rax                    # eax <- CC
+-    movss   VREG_ADDRESS(%rcx), %xmm0       # %xmm0 <- 1st src
+-    divss VREG_ADDRESS(%rax), %xmm0
+-    movss   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
+-    pxor    %xmm0, %xmm0
+-    movss   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
++    vmovss   VREG_ADDRESS(%rcx), %xmm1       # %xmm1 <- 1st src
++    vdivss VREG_ADDRESS(%rax), %xmm1, %xmm0
++    vmovss   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
++    vpxor    %xmm0, %xmm0, %xmm0
++    vmovss   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
+     ADVANCE_PC_FETCH_AND_GOTO_NEXT 2
+ 
+ 
+@@ -4350,11 +4350,11 @@ movswl %ax, %eax
+ /* File: x86_64/sseBinop.S */
+     movzbq  2(rPC), %rcx                    # ecx <- BB
+     movzbq  3(rPC), %rax                    # eax <- CC
+-    movsd   VREG_ADDRESS(%rcx), %xmm0       # %xmm0 <- 1st src
+-    addsd VREG_ADDRESS(%rax), %xmm0
+-    movsd   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
+-    pxor    %xmm0, %xmm0
+-    movsd   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
++    vmovsd   VREG_ADDRESS(%rcx), %xmm1       # %xmm1 <- 1st src
++    vaddsd VREG_ADDRESS(%rax), %xmm1, %xmm0
++    vmovsd   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
++    vpxor    %xmm0, %xmm0, %xmm0
++    vmovsd   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
+     ADVANCE_PC_FETCH_AND_GOTO_NEXT 2
+ 
+ 
+@@ -4365,11 +4365,11 @@ movswl %ax, %eax
+ /* File: x86_64/sseBinop.S */
+     movzbq  2(rPC), %rcx                    # ecx <- BB
+     movzbq  3(rPC), %rax                    # eax <- CC
+-    movsd   VREG_ADDRESS(%rcx), %xmm0       # %xmm0 <- 1st src
+-    subsd VREG_ADDRESS(%rax), %xmm0
+-    movsd   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
+-    pxor    %xmm0, %xmm0
+-    movsd   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
++    vmovsd   VREG_ADDRESS(%rcx), %xmm1       # %xmm1 <- 1st src
++    vsubsd VREG_ADDRESS(%rax), %xmm1, %xmm0
++    vmovsd   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
++    vpxor    %xmm0, %xmm0, %xmm0
++    vmovsd   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
+     ADVANCE_PC_FETCH_AND_GOTO_NEXT 2
+ 
+ 
+@@ -4380,11 +4380,11 @@ movswl %ax, %eax
+ /* File: x86_64/sseBinop.S */
+     movzbq  2(rPC), %rcx                    # ecx <- BB
+     movzbq  3(rPC), %rax                    # eax <- CC
+-    movsd   VREG_ADDRESS(%rcx), %xmm0       # %xmm0 <- 1st src
+-    mulsd VREG_ADDRESS(%rax), %xmm0
+-    movsd   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
+-    pxor    %xmm0, %xmm0
+-    movsd   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
++    vmovsd   VREG_ADDRESS(%rcx), %xmm1       # %xmm1 <- 1st src
++    vmulsd VREG_ADDRESS(%rax), %xmm1, %xmm0
++    vmovsd   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
++    vpxor    %xmm0, %xmm0, %xmm0
++    vmovsd   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
+     ADVANCE_PC_FETCH_AND_GOTO_NEXT 2
+ 
+ 
+@@ -4395,11 +4395,11 @@ movswl %ax, %eax
+ /* File: x86_64/sseBinop.S */
+     movzbq  2(rPC), %rcx                    # ecx <- BB
+     movzbq  3(rPC), %rax                    # eax <- CC
+-    movsd   VREG_ADDRESS(%rcx), %xmm0       # %xmm0 <- 1st src
+-    divsd VREG_ADDRESS(%rax), %xmm0
+-    movsd   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
+-    pxor    %xmm0, %xmm0
+-    movsd   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
++    vmovsd   VREG_ADDRESS(%rcx), %xmm1       # %xmm1 <- 1st src
++    vdivsd VREG_ADDRESS(%rax), %xmm1, %xmm0
++    vmovsd   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
++    vpxor    %xmm0, %xmm0, %xmm0
++    vmovsd   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
+     ADVANCE_PC_FETCH_AND_GOTO_NEXT 2
+ 
+ 
+@@ -4984,12 +4984,12 @@ movswl %ax, %eax
+ /* File: x86_64/sseBinop2Addr.S */
+     movl    rINST, %ecx                     # ecx <- A+
+     andl    $0xf, %ecx                     # ecx <- A
+-    movss VREG_ADDRESS(%rcx), %xmm0        # %xmm0 <- 1st src
++    vmovss VREG_ADDRESS(%rcx), %xmm1        # %xmm1 <- 1st src
+     sarl    $4, rINST                      # rINST<- B
+-    addss VREG_ADDRESS(rINSTq), %xmm0
+-    movss %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
+-    pxor    %xmm0, %xmm0
+-    movss %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
++    vaddss  %xmm1, VREG_ADDRESS(rINSTq), %xmm0
++    vmovss %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
++    vpxor    %xmm0, %xmm0, %xmm0
++    vmovss %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
+     ADVANCE_PC_FETCH_AND_GOTO_NEXT 1
+ 
+ 
+@@ -5000,12 +5000,12 @@ movswl %ax, %eax
+ /* File: x86_64/sseBinop2Addr.S */
+     movl    rINST, %ecx                     # ecx <- A+
+     andl    $0xf, %ecx                     # ecx <- A
+-    movss VREG_ADDRESS(%rcx), %xmm0        # %xmm0 <- 1st src
++    vmovss VREG_ADDRESS(%rcx), %xmm1        # %xmm1 <- 1st src
+     sarl    $4, rINST                      # rINST<- B
+-    subss VREG_ADDRESS(rINSTq), %xmm0
+-    movss %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
+-    pxor    %xmm0, %xmm0
+-    movss %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
++    vsubss  %xmm1, VREG_ADDRESS(rINSTq), %xmm0
++    vmovss %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
++    vpxor    %xmm0, %xmm0, %xmm0
++    vmovss %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
+     ADVANCE_PC_FETCH_AND_GOTO_NEXT 1
+ 
+ 
+@@ -5016,12 +5016,12 @@ movswl %ax, %eax
+ /* File: x86_64/sseBinop2Addr.S */
+     movl    rINST, %ecx                     # ecx <- A+
+     andl    $0xf, %ecx                     # ecx <- A
+-    movss VREG_ADDRESS(%rcx), %xmm0        # %xmm0 <- 1st src
++    vmovss VREG_ADDRESS(%rcx), %xmm1        # %xmm1 <- 1st src
+     sarl    $4, rINST                      # rINST<- B
+-    mulss VREG_ADDRESS(rINSTq), %xmm0
+-    movss %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
+-    pxor    %xmm0, %xmm0
+-    movss %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
++    vmulss  %xmm1, VREG_ADDRESS(rINSTq), %xmm0
++    vmovss %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
++    vpxor    %xmm0, %xmm0, %xmm0
++    vmovss %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
+     ADVANCE_PC_FETCH_AND_GOTO_NEXT 1
+ 
+ 
+@@ -5032,12 +5032,12 @@ movswl %ax, %eax
+ /* File: x86_64/sseBinop2Addr.S */
+     movl    rINST, %ecx                     # ecx <- A+
+     andl    $0xf, %ecx                     # ecx <- A
+-    movss VREG_ADDRESS(%rcx), %xmm0        # %xmm0 <- 1st src
++    vmovss VREG_ADDRESS(%rcx), %xmm1        # %xmm1 <- 1st src
+     sarl    $4, rINST                      # rINST<- B
+-    divss VREG_ADDRESS(rINSTq), %xmm0
+-    movss %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
+-    pxor    %xmm0, %xmm0
+-    movss %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
++    vdivss  %xmm1, VREG_ADDRESS(rINSTq), %xmm0
++    vmovss %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
++    vpxor    %xmm0, %xmm0, %xmm0
++    vmovss %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
+     ADVANCE_PC_FETCH_AND_GOTO_NEXT 1
+ 
+ 
+@@ -5068,12 +5068,12 @@ movswl %ax, %eax
+ /* File: x86_64/sseBinop2Addr.S */
+     movl    rINST, %ecx                     # ecx <- A+
+     andl    $0xf, %ecx                     # ecx <- A
+-    movsd VREG_ADDRESS(%rcx), %xmm0        # %xmm0 <- 1st src
++    vmovsd VREG_ADDRESS(%rcx), %xmm1        # %xmm1 <- 1st src
+     sarl    $4, rINST                      # rINST<- B
+-    addsd VREG_ADDRESS(rINSTq), %xmm0
+-    movsd %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
+-    pxor    %xmm0, %xmm0
+-    movsd %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
++    vaddsd  %xmm1, VREG_ADDRESS(rINSTq), %xmm0
++    vmovsd %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
++    vpxor    %xmm0, %xmm0, %xmm0
++    vmovsd %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
+     ADVANCE_PC_FETCH_AND_GOTO_NEXT 1
+ 
+ 
+@@ -5084,12 +5084,12 @@ movswl %ax, %eax
+ /* File: x86_64/sseBinop2Addr.S */
+     movl    rINST, %ecx                     # ecx <- A+
+     andl    $0xf, %ecx                     # ecx <- A
+-    movsd VREG_ADDRESS(%rcx), %xmm0        # %xmm0 <- 1st src
++    vmovsd VREG_ADDRESS(%rcx), %xmm1        # %xmm1 <- 1st src
+     sarl    $4, rINST                      # rINST<- B
+-    subsd VREG_ADDRESS(rINSTq), %xmm0
+-    movsd %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
+-    pxor    %xmm0, %xmm0
+-    movsd %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
++    vsubsd  %xmm1, VREG_ADDRESS(rINSTq), %xmm0
++    vmovsd %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
++    vpxor    %xmm0, %xmm0, %xmm0
++    vmovsd %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
+     ADVANCE_PC_FETCH_AND_GOTO_NEXT 1
+ 
+ 
+@@ -5100,12 +5100,12 @@ movswl %ax, %eax
+ /* File: x86_64/sseBinop2Addr.S */
+     movl    rINST, %ecx                     # ecx <- A+
+     andl    $0xf, %ecx                     # ecx <- A
+-    movsd VREG_ADDRESS(%rcx), %xmm0        # %xmm0 <- 1st src
++    vmovsd VREG_ADDRESS(%rcx), %xmm1        # %xmm1 <- 1st src
+     sarl    $4, rINST                      # rINST<- B
+-    mulsd VREG_ADDRESS(rINSTq), %xmm0
+-    movsd %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
+-    pxor    %xmm0, %xmm0
+-    movsd %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
++    vmulsd  %xmm1, VREG_ADDRESS(rINSTq), %xmm0
++    vmovsd %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
++    vpxor    %xmm0, %xmm0, %xmm0
++    vmovsd %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
+     ADVANCE_PC_FETCH_AND_GOTO_NEXT 1
+ 
+ 
+@@ -5116,12 +5116,12 @@ movswl %ax, %eax
+ /* File: x86_64/sseBinop2Addr.S */
+     movl    rINST, %ecx                     # ecx <- A+
+     andl    $0xf, %ecx                     # ecx <- A
+-    movsd VREG_ADDRESS(%rcx), %xmm0        # %xmm0 <- 1st src
++    vmovsd VREG_ADDRESS(%rcx), %xmm1        # %xmm1 <- 1st src
+     sarl    $4, rINST                      # rINST<- B
+-    divsd VREG_ADDRESS(rINSTq), %xmm0
+-    movsd %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
+-    pxor    %xmm0, %xmm0
+-    movsd %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
++    vdivsd  %xmm1, VREG_ADDRESS(rINSTq), %xmm0
++    vmovsd %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
++    vpxor    %xmm0, %xmm0, %xmm0
++    vmovsd %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
+     ADVANCE_PC_FETCH_AND_GOTO_NEXT 1
+ 
+ 
+diff --git a/runtime/interpreter/mterp/x86_64/sseBinop.S b/runtime/interpreter/mterp/x86_64/sseBinop.S
+index 09d3364de..65147debe 100644
+--- a/runtime/interpreter/mterp/x86_64/sseBinop.S
++++ b/runtime/interpreter/mterp/x86_64/sseBinop.S
+@@ -1,9 +1,9 @@
+ %default {"instr":"","suff":""}
+     movzbq  2(rPC), %rcx                    # ecx <- BB
+     movzbq  3(rPC), %rax                    # eax <- CC
+-    movs${suff}   VREG_ADDRESS(%rcx), %xmm0       # %xmm0 <- 1st src
+-    ${instr}${suff} VREG_ADDRESS(%rax), %xmm0
+-    movs${suff}   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
+-    pxor    %xmm0, %xmm0
+-    movs${suff}   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
++    vmovs${suff}   VREG_ADDRESS(%rcx), %xmm1       # %xmm1 <- 1st src
++    v${instr}${suff} VREG_ADDRESS(%rax), %xmm1, %xmm0
++    vmovs${suff}   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
++    vpxor    %xmm0, %xmm0, %xmm0
++    vmovs${suff}   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
+     ADVANCE_PC_FETCH_AND_GOTO_NEXT 2
+diff --git a/runtime/interpreter/mterp/x86_64/sseBinop2Addr.S b/runtime/interpreter/mterp/x86_64/sseBinop2Addr.S
+index 084166b95..33be0c9d2 100644
+--- a/runtime/interpreter/mterp/x86_64/sseBinop2Addr.S
++++ b/runtime/interpreter/mterp/x86_64/sseBinop2Addr.S
+@@ -1,10 +1,10 @@
+ %default {"instr":"","suff":""}
+     movl    rINST, %ecx                     # ecx <- A+
+     andl    $$0xf, %ecx                     # ecx <- A
+-    movs${suff} VREG_ADDRESS(%rcx), %xmm0        # %xmm0 <- 1st src
++    vmovs${suff} VREG_ADDRESS(%rcx), %xmm1        # %xmm1 <- 1st src
+     sarl    $$4, rINST                      # rINST<- B
+-    ${instr}${suff} VREG_ADDRESS(rINSTq), %xmm0
+-    movs${suff} %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
+-    pxor    %xmm0, %xmm0
+-    movs${suff} %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
++    v${instr}${suff}  %xmm1, VREG_ADDRESS(rINSTq), %xmm0
++    vmovs${suff} %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
++    vpxor    %xmm0, %xmm0, %xmm0
++    vmovs${suff} %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
+     ADVANCE_PC_FETCH_AND_GOTO_NEXT 1
+-- 
+2.21.0
+
diff --git a/runtime/interpreter/mterp/out/mterp_x86_64.S b/runtime/interpreter/mterp/out/mterp_x86_64.S
index fca251569..e089bc543 100644
--- a/runtime/interpreter/mterp/out/mterp_x86_64.S
+++ b/runtime/interpreter/mterp/out/mterp_x86_64.S
@@ -4271,11 +4271,11 @@ movswl %ax, %eax
 /* File: x86_64/sseBinop.S */
     movzbq  2(rPC), %rcx                    # ecx <- BB
     movzbq  3(rPC), %rax                    # eax <- CC
-    movss   VREG_ADDRESS(%rcx), %xmm0       # %xmm0 <- 1st src
-    addss VREG_ADDRESS(%rax), %xmm0
-    movss   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
-    pxor    %xmm0, %xmm0
-    movss   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
+    vmovss   VREG_ADDRESS(%rcx), %xmm1       # %xmm1 <- 1st src
+    vaddss VREG_ADDRESS(%rax), %xmm1, %xmm0
+    vmovss   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
+    vpxor    %xmm0, %xmm0, %xmm0
+    vmovss   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
     ADVANCE_PC_FETCH_AND_GOTO_NEXT 2
 
 
@@ -4286,11 +4286,11 @@ movswl %ax, %eax
 /* File: x86_64/sseBinop.S */
     movzbq  2(rPC), %rcx                    # ecx <- BB
     movzbq  3(rPC), %rax                    # eax <- CC
-    movss   VREG_ADDRESS(%rcx), %xmm0       # %xmm0 <- 1st src
-    subss VREG_ADDRESS(%rax), %xmm0
-    movss   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
-    pxor    %xmm0, %xmm0
-    movss   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
+    vmovss   VREG_ADDRESS(%rcx), %xmm1       # %xmm1 <- 1st src
+    vsubss VREG_ADDRESS(%rax), %xmm1, %xmm0
+    vmovss   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
+    vpxor    %xmm0, %xmm0, %xmm0
+    vmovss   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
     ADVANCE_PC_FETCH_AND_GOTO_NEXT 2
 
 
@@ -4301,11 +4301,11 @@ movswl %ax, %eax
 /* File: x86_64/sseBinop.S */
     movzbq  2(rPC), %rcx                    # ecx <- BB
     movzbq  3(rPC), %rax                    # eax <- CC
-    movss   VREG_ADDRESS(%rcx), %xmm0       # %xmm0 <- 1st src
-    mulss VREG_ADDRESS(%rax), %xmm0
-    movss   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
-    pxor    %xmm0, %xmm0
-    movss   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
+    vmovss   VREG_ADDRESS(%rcx), %xmm1       # %xmm1 <- 1st src
+    vmulss VREG_ADDRESS(%rax), %xmm1, %xmm0
+    vmovss   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
+    vpxor    %xmm0, %xmm0, %xmm0
+    vmovss   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
     ADVANCE_PC_FETCH_AND_GOTO_NEXT 2
 
 
@@ -4316,11 +4316,11 @@ movswl %ax, %eax
 /* File: x86_64/sseBinop.S */
     movzbq  2(rPC), %rcx                    # ecx <- BB
     movzbq  3(rPC), %rax                    # eax <- CC
-    movss   VREG_ADDRESS(%rcx), %xmm0       # %xmm0 <- 1st src
-    divss VREG_ADDRESS(%rax), %xmm0
-    movss   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
-    pxor    %xmm0, %xmm0
-    movss   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
+    vmovss   VREG_ADDRESS(%rcx), %xmm1       # %xmm1 <- 1st src
+    vdivss VREG_ADDRESS(%rax), %xmm1, %xmm0
+    vmovss   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
+    vpxor    %xmm0, %xmm0, %xmm0
+    vmovss   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
     ADVANCE_PC_FETCH_AND_GOTO_NEXT 2
 
 
@@ -4350,11 +4350,11 @@ movswl %ax, %eax
 /* File: x86_64/sseBinop.S */
     movzbq  2(rPC), %rcx                    # ecx <- BB
     movzbq  3(rPC), %rax                    # eax <- CC
-    movsd   VREG_ADDRESS(%rcx), %xmm0       # %xmm0 <- 1st src
-    addsd VREG_ADDRESS(%rax), %xmm0
-    movsd   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
-    pxor    %xmm0, %xmm0
-    movsd   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
+    vmovsd   VREG_ADDRESS(%rcx), %xmm1       # %xmm1 <- 1st src
+    vaddsd VREG_ADDRESS(%rax), %xmm1, %xmm0
+    vmovsd   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
+    vpxor    %xmm0, %xmm0, %xmm0
+    vmovsd   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
     ADVANCE_PC_FETCH_AND_GOTO_NEXT 2
 
 
@@ -4365,11 +4365,11 @@ movswl %ax, %eax
 /* File: x86_64/sseBinop.S */
     movzbq  2(rPC), %rcx                    # ecx <- BB
     movzbq  3(rPC), %rax                    # eax <- CC
-    movsd   VREG_ADDRESS(%rcx), %xmm0       # %xmm0 <- 1st src
-    subsd VREG_ADDRESS(%rax), %xmm0
-    movsd   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
-    pxor    %xmm0, %xmm0
-    movsd   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
+    vmovsd   VREG_ADDRESS(%rcx), %xmm1       # %xmm1 <- 1st src
+    vsubsd VREG_ADDRESS(%rax), %xmm1, %xmm0
+    vmovsd   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
+    vpxor    %xmm0, %xmm0, %xmm0
+    vmovsd   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
     ADVANCE_PC_FETCH_AND_GOTO_NEXT 2
 
 
@@ -4380,11 +4380,11 @@ movswl %ax, %eax
 /* File: x86_64/sseBinop.S */
     movzbq  2(rPC), %rcx                    # ecx <- BB
     movzbq  3(rPC), %rax                    # eax <- CC
-    movsd   VREG_ADDRESS(%rcx), %xmm0       # %xmm0 <- 1st src
-    mulsd VREG_ADDRESS(%rax), %xmm0
-    movsd   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
-    pxor    %xmm0, %xmm0
-    movsd   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
+    vmovsd   VREG_ADDRESS(%rcx), %xmm1       # %xmm1 <- 1st src
+    vmulsd VREG_ADDRESS(%rax), %xmm1, %xmm0
+    vmovsd   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
+    vpxor    %xmm0, %xmm0, %xmm0
+    vmovsd   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
     ADVANCE_PC_FETCH_AND_GOTO_NEXT 2
 
 
@@ -4395,11 +4395,11 @@ movswl %ax, %eax
 /* File: x86_64/sseBinop.S */
     movzbq  2(rPC), %rcx                    # ecx <- BB
     movzbq  3(rPC), %rax                    # eax <- CC
-    movsd   VREG_ADDRESS(%rcx), %xmm0       # %xmm0 <- 1st src
-    divsd VREG_ADDRESS(%rax), %xmm0
-    movsd   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
-    pxor    %xmm0, %xmm0
-    movsd   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
+    vmovsd   VREG_ADDRESS(%rcx), %xmm1       # %xmm1 <- 1st src
+    vdivsd VREG_ADDRESS(%rax), %xmm1, %xmm0
+    vmovsd   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
+    vpxor    %xmm0, %xmm0, %xmm0
+    vmovsd   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
     ADVANCE_PC_FETCH_AND_GOTO_NEXT 2
 
 
@@ -4984,12 +4984,12 @@ movswl %ax, %eax
 /* File: x86_64/sseBinop2Addr.S */
     movl    rINST, %ecx                     # ecx <- A+
     andl    $0xf, %ecx                     # ecx <- A
-    movss VREG_ADDRESS(%rcx), %xmm0        # %xmm0 <- 1st src
+    vmovss VREG_ADDRESS(%rcx), %xmm1        # %xmm1 <- 1st src
     sarl    $4, rINST                      # rINST<- B
-    addss VREG_ADDRESS(rINSTq), %xmm0
-    movss %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
-    pxor    %xmm0, %xmm0
-    movss %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
+    vaddss VREG_ADDRESS(rINSTq), %xmm1, %xmm0
+    vmovss %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
+    vpxor    %xmm0, %xmm0, %xmm0
+    vmovss %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
     ADVANCE_PC_FETCH_AND_GOTO_NEXT 1
 
 
@@ -5000,12 +5000,12 @@ movswl %ax, %eax
 /* File: x86_64/sseBinop2Addr.S */
     movl    rINST, %ecx                     # ecx <- A+
     andl    $0xf, %ecx                     # ecx <- A
-    movss VREG_ADDRESS(%rcx), %xmm0        # %xmm0 <- 1st src
+    vmovss VREG_ADDRESS(%rcx), %xmm1        # %xmm1 <- 1st src
     sarl    $4, rINST                      # rINST<- B
-    subss VREG_ADDRESS(rINSTq), %xmm0
-    movss %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
-    pxor    %xmm0, %xmm0
-    movss %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
+    vsubss VREG_ADDRESS(rINSTq), %xmm1, %xmm0
+    vmovss %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
+    vpxor    %xmm0, %xmm0, %xmm0
+    vmovss %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
     ADVANCE_PC_FETCH_AND_GOTO_NEXT 1
 
 
@@ -5016,12 +5016,12 @@ movswl %ax, %eax
 /* File: x86_64/sseBinop2Addr.S */
     movl    rINST, %ecx                     # ecx <- A+
     andl    $0xf, %ecx                     # ecx <- A
-    movss VREG_ADDRESS(%rcx), %xmm0        # %xmm0 <- 1st src
+    vmovss VREG_ADDRESS(%rcx), %xmm1        # %xmm1 <- 1st src
     sarl    $4, rINST                      # rINST<- B
-    mulss VREG_ADDRESS(rINSTq), %xmm0
-    movss %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
-    pxor    %xmm0, %xmm0
-    movss %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
+    vmulss VREG_ADDRESS(rINSTq), %xmm1, %xmm0
+    vmovss %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
+    vpxor    %xmm0, %xmm0, %xmm0
+    vmovss %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
     ADVANCE_PC_FETCH_AND_GOTO_NEXT 1
 
 
@@ -5032,12 +5032,12 @@ movswl %ax, %eax
 /* File: x86_64/sseBinop2Addr.S */
     movl    rINST, %ecx                     # ecx <- A+
     andl    $0xf, %ecx                     # ecx <- A
-    movss VREG_ADDRESS(%rcx), %xmm0        # %xmm0 <- 1st src
+    vmovss VREG_ADDRESS(%rcx), %xmm1        # %xmm1 <- 1st src
     sarl    $4, rINST                      # rINST<- B
-    divss VREG_ADDRESS(rINSTq), %xmm0
-    movss %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
-    pxor    %xmm0, %xmm0
-    movss %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
+    vdivss VREG_ADDRESS(rINSTq), %xmm1, %xmm0
+    vmovss %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
+    vpxor    %xmm0, %xmm0, %xmm0
+    vmovss %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
     ADVANCE_PC_FETCH_AND_GOTO_NEXT 1
 
 
@@ -5068,12 +5068,12 @@ movswl %ax, %eax
 /* File: x86_64/sseBinop2Addr.S */
     movl    rINST, %ecx                     # ecx <- A+
     andl    $0xf, %ecx                     # ecx <- A
-    movsd VREG_ADDRESS(%rcx), %xmm0        # %xmm0 <- 1st src
+    vmovsd VREG_ADDRESS(%rcx), %xmm1        # %xmm1 <- 1st src
     sarl    $4, rINST                      # rINST<- B
-    addsd VREG_ADDRESS(rINSTq), %xmm0
-    movsd %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
-    pxor    %xmm0, %xmm0
-    movsd %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
+    vaddsd VREG_ADDRESS(rINSTq), %xmm1, %xmm0
+    vmovsd %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
+    vpxor    %xmm0, %xmm0, %xmm0
+    vmovsd %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
     ADVANCE_PC_FETCH_AND_GOTO_NEXT 1
 
 
@@ -5084,12 +5084,12 @@ movswl %ax, %eax
 /* File: x86_64/sseBinop2Addr.S */
     movl    rINST, %ecx                     # ecx <- A+
     andl    $0xf, %ecx                     # ecx <- A
-    movsd VREG_ADDRESS(%rcx), %xmm0        # %xmm0 <- 1st src
+    vmovsd VREG_ADDRESS(%rcx), %xmm1        # %xmm1 <- 1st src
     sarl    $4, rINST                      # rINST<- B
-    subsd VREG_ADDRESS(rINSTq), %xmm0
-    movsd %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
-    pxor    %xmm0, %xmm0
-    movsd %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
+    vsubsd VREG_ADDRESS(rINSTq), %xmm1, %xmm0
+    vmovsd %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
+    vpxor    %xmm0, %xmm0, %xmm0
+    vmovsd %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
     ADVANCE_PC_FETCH_AND_GOTO_NEXT 1
 
 
@@ -5100,12 +5100,12 @@ movswl %ax, %eax
 /* File: x86_64/sseBinop2Addr.S */
     movl    rINST, %ecx                     # ecx <- A+
     andl    $0xf, %ecx                     # ecx <- A
-    movsd VREG_ADDRESS(%rcx), %xmm0        # %xmm0 <- 1st src
+    vmovsd VREG_ADDRESS(%rcx), %xmm1        # %xmm1 <- 1st src
     sarl    $4, rINST                      # rINST<- B
-    mulsd VREG_ADDRESS(rINSTq), %xmm0
-    movsd %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
-    pxor    %xmm0, %xmm0
-    movsd %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
+    vmulsd VREG_ADDRESS(rINSTq), %xmm1, %xmm0
+    vmovsd %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
+    vpxor    %xmm0, %xmm0, %xmm0
+    vmovsd %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
     ADVANCE_PC_FETCH_AND_GOTO_NEXT 1
 
 
@@ -5116,12 +5116,12 @@ movswl %ax, %eax
 /* File: x86_64/sseBinop2Addr.S */
     movl    rINST, %ecx                     # ecx <- A+
     andl    $0xf, %ecx                     # ecx <- A
-    movsd VREG_ADDRESS(%rcx), %xmm0        # %xmm0 <- 1st src
+    vmovsd VREG_ADDRESS(%rcx), %xmm1        # %xmm1 <- 1st src
     sarl    $4, rINST                      # rINST<- B
-    divsd VREG_ADDRESS(rINSTq), %xmm0
-    movsd %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
-    pxor    %xmm0, %xmm0
-    movsd %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
+    vdivsd VREG_ADDRESS(rINSTq), %xmm1, %xmm0
+    vmovsd %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
+    vpxor    %xmm0, %xmm0, %xmm0
+    vmovsd %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
     ADVANCE_PC_FETCH_AND_GOTO_NEXT 1
 
 
diff --git a/runtime/interpreter/mterp/x86_64/sseBinop.S b/runtime/interpreter/mterp/x86_64/sseBinop.S
index 09d3364de..65147debe 100644
--- a/runtime/interpreter/mterp/x86_64/sseBinop.S
+++ b/runtime/interpreter/mterp/x86_64/sseBinop.S
@@ -1,9 +1,9 @@
 %default {"instr":"","suff":""}
     movzbq  2(rPC), %rcx                    # ecx <- BB
     movzbq  3(rPC), %rax                    # eax <- CC
-    movs${suff}   VREG_ADDRESS(%rcx), %xmm0       # %xmm0 <- 1st src
-    ${instr}${suff} VREG_ADDRESS(%rax), %xmm0
-    movs${suff}   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
-    pxor    %xmm0, %xmm0
-    movs${suff}   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
+    vmovs${suff}   VREG_ADDRESS(%rcx), %xmm1       # %xmm1 <- 1st src
+    v${instr}${suff} VREG_ADDRESS(%rax), %xmm1, %xmm0
+    vmovs${suff}   %xmm0, VREG_ADDRESS(rINSTq)     # vAA <- %xmm0
+    vpxor    %xmm0, %xmm0, %xmm0
+    vmovs${suff}   %xmm0, VREG_REF_ADDRESS(rINSTq) # clear ref
     ADVANCE_PC_FETCH_AND_GOTO_NEXT 2
diff --git a/runtime/interpreter/mterp/x86_64/sseBinop2Addr.S b/runtime/interpreter/mterp/x86_64/sseBinop2Addr.S
index 084166b95..e66e8ac0e 100644
--- a/runtime/interpreter/mterp/x86_64/sseBinop2Addr.S
+++ b/runtime/interpreter/mterp/x86_64/sseBinop2Addr.S
@@ -1,10 +1,10 @@
 %default {"instr":"","suff":""}
     movl    rINST, %ecx                     # ecx <- A+
     andl    $$0xf, %ecx                     # ecx <- A
-    movs${suff} VREG_ADDRESS(%rcx), %xmm0        # %xmm0 <- 1st src
+    vmovs${suff} VREG_ADDRESS(%rcx), %xmm1        # %xmm1 <- 1st src
     sarl    $$4, rINST                      # rINST<- B
-    ${instr}${suff} VREG_ADDRESS(rINSTq), %xmm0
-    movs${suff} %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
-    pxor    %xmm0, %xmm0
-    movs${suff} %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
+    v${instr}${suff} VREG_ADDRESS(rINSTq), %xmm1, %xmm0
+    vmovs${suff} %xmm0, VREG_ADDRESS(%rcx)   # vAA<- %xmm0
+    vpxor    %xmm0, %xmm0, %xmm0
+    vmovs${suff} %xmm0, VREG_REF_ADDRESS(rINSTq)  # clear ref
     ADVANCE_PC_FETCH_AND_GOTO_NEXT 1
-- 
2.21.0

